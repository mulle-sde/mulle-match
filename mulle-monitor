#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.3.3
MULLE_EXECUTABLE_BASHFUNCTIONS="1"


#
# This is the main user interface to mulle-monitor
#

trap_fail()
{
   exit 1
}


SHOWN_COMMANDS="\
   callback       : manage callbacks
   init           : create a new project
   patternfile    : manage patternfiles
   task           : manage tasks
   run            : monitor files and run scripts"

HIDDEN_COMMANDS="\
   clean          : remove var/run files
   find           : find files that match patternfiles
   libexec-dir    : print path to mulle-monitor libexec
   match          : match filenames against patternfiles
   uname          : mulle-monitors simplified uname(1)"


print_commands()
{
   local show_all="${1:-NO}"

   echo "${SHOWN_COMMANDS}"

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}"
   fi
}


print_hidden_flags()
{
   echo "   -cd <dir>      : set MULLE_MONITOR_DIR"
   echo "   -id <dir>      : set MULLE_MONITOR_IGNORE_DIR"
   echo "   -md <dir>      : set MULLE_MONITOR_MATCH_DIR"
   echo "   -ed <dir>      : set MULLE_MONITOR_ETC_DIR"

}


print_flags()
{
   local show_all="${1:-NO}"

   local delimiter

   delimiter="          : "

   if [ "${show_all}" != "NO" ]
   then
      print_hidden_flags
   fi

   echo "   -e   ${delimiter}bypass mulle-env check"
   echo "   -f   ${delimiter}force operation"

   options_technical_flags_usage "${delimiter}"
}


_usage()
{
   local verbose="${1:-NO}"
   local error="${2}"

   if [ ! -z "${error}" ]
   then
      log_error "${error}"
   fi

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   The filesystem monitor. Invokes callbacks based on changes to files. A
   callback may optionally invoke a task. Which callback is invoked, is based
   on patternfiles, which are .gitignore like rule files.

Flags:
EOF
   print_flags "${verbose}" | sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | sort

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-monitor -v help to show more commands)
EOF
   fi

   cat <<EOF

   Use ${MULLE_USAGE_NAME} <command> -h for topical help.
EOF

   exit 1
}


usage()
{
   _usage "$@" >&2
   exit 1
}


monitor_environment()
{
   log_entry "monitor_environment" "$@"

   # lame but practical
   if [ -z "${MULLE_MONITOR_DIR}" ]
   then
      if [ -d ".mulle-sde" ]
      then
         log_fluff "MULLE_MONITOR_DIR default is .mulle-sde"
         MULLE_MONITOR_DIR=".mulle-sde"
      else
         log_fluff "MULLE_MONITOR_DIR default is .mulle-monitor"
         MULLE_MONITOR_DIR=".mulle-monitor"
      fi
   fi

   MULLE_MONITOR_ETC_DIR="${MULLE_MONITOR_ETC_DIR:-${MULLE_MONITOR_DIR}/etc}"

   case "${MULLE_MONITOR_MATCH_DIR}" in
      NO)
         MULLE_MONITOR_MATCH_DIR=""
         log_fluff "Not using \"MULLE_MONITOR_MATCH_DIR\""
      ;;

      "")
         MULLE_MONITOR_MATCH_DIR="${MULLE_MONITOR_ETC_DIR}/match.d"
         if [ ! -d "${MULLE_MONITOR_MATCH_DIR}" ]
         then
            MULLE_MONITOR_MATCH_DIR="${MULLE_MONITOR_DIR}/share/match.d"
         fi
         if [ ! -d "${MULLE_MONITOR_MATCH_DIR}" ]
         then
            log_warning "There is no directory \"${MULLE_MONITOR_MATCH_DIR}\" set up"
            MULLE_MONITOR_MATCH_DIR=""
         fi
      ;;
   esac

   case "${MULLE_MONITOR_IGNORE_DIR}" in
      NO)
         MULLE_MONITOR_IGNORE_DIR=""
         log_fluff "Not using \"MULLE_MONITOR_IGNORE_DIR\""
      ;;

      "")
         MULLE_MONITOR_IGNORE_DIR="${MULLE_MONITOR_ETC_DIR}/ignore.d"
         if [ ! -d "${MULLE_MONITOR_IGNORE_DIR}" ]
         then
            MULLE_MONITOR_IGNORE_DIR="${MULLE_MONITOR_DIR}/share/ignore.d"
         fi
         if [ ! -d "${MULLE_MONITOR_IGNORE_DIR}" ]
         then
            log_fluff "There is no directory \"${MULLE_MONITOR_IGNORE_DIR}\" set up"
            MULLE_MONITOR_IGNORE_DIR=""
         fi
      ;;
   esac
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE="NO"

   # technical flags
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -e)
            FLAG_OUTSIDE_ENV="YES"
         ;;

         -f)
            MULLE_FLAG_MAGNUM_FORCE="YES"
         ;;

         -cd|--config-dir)
            [ $# -eq 1 ] && usage "${MULLE_TRACE}" "missing argument to \"$1\""
            shift

            MULLE_MONITOR_DIR="$1"
         ;;

         -ed|--etc-dir)
            [ $# -eq 1 ] && usage "${MULLE_TRACE}" "missing argument to \"$1\""
            shift

            MULLE_MONITOR_ETC_DIR="$1"
         ;;

         -md|--match-dir)
            [ $# -eq 1 ] && usage "${MULLE_TRACE}" "missing argument to \"$1\""
            shift

            MULLE_MONITOR_MATCH_DIR="$1"
         ;;

         -id|--ignore-dir)
            [ $# -eq 1 ] && usage "${MULLE_TRACE}" "missing argument to \"$1\""

            MULLE_MONITOR_IGNORE_DIR="$1"
         ;;

         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="$1"
   [ $# -ne 0 ] && shift

   MULLE_EXECUTABLE_FAIL_PREFIX="`concat "${MULLE_EXECUTABLE_NAME}" "${cmd}" `"

   if [ "${FLAG_OUTSIDE_ENV}" = "YES" ]
   then
      MULLE_VIRTUAL_ROOT="${PWD}"
      export MULLE_VIRTUAL_ROOT
   fi

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      case "${cmd}" in
         callback|find|match|run|task)
            fail "To run ${MULLE_EXECUTABLE_NAME} outside of mulle-env, \
pass the -e flag"
         ;;
      esac
   fi

   local physdir

   physdir="`pwd -P`"

   [ -d "${physdir}" ]      || fail "Working directory \"${PWD}\" does not exist"
   exekutor cd "${physdir}" || fail "Could not cd to physical directory \"${physdir}\""

   MULLE_EXECUTABLE_OPTIONS="$@"

   monitor_environment

   case "${cmd}" in
      help)
         usage "${MULLE_TRACE}"
      ;;

      callback)
         # shellcheck source=src/mulle-monitor-callback.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-callback.sh"

         monitor_callback_main "$@"
      ;;

      clean)
         # shellcheck source=src/mulle-monitor-clean.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-clean.sh"

         monitor_clean_main "$@"
      ;;

      libexec-dir|library-path)
         echo "${MULLE_MONITOR_LIBEXEC_DIR}"
      ;;

      match)
         # shellcheck source=src/mulle-monitor-match.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-match.sh"

         monitor_match_main "$@"
      ;;

      find)
         # shellcheck source=src/mulle-monitor-run.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-find.sh"

         monitor_find_main "$@"
      ;;

      patternfile)
         # shellcheck source=src/mulle-monitor-patternfile.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-patternfile.sh"

         monitor_patternfile_main "$@"
      ;;

      run)
         # shellcheck source=src/mulle-monitor-run.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-run.sh"

         monitor_run_main "$@"
      ;;

      task)
         # shellcheck source=src/mulle-monitor-task.sh
         . "${MULLE_MONITOR_LIBEXEC_DIR}/mulle-monitor-task.sh"

         monitor_task_main "$@"
      ;;

      uname)
         echo "${UNAME}"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      "")
         MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME}"
         usage "${MULLE_TRACE}"
      ;;

      *)
         MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE_NAME}"
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
             echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || \
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-monitor" "mulle-monitor-match.sh"

   MULLE_MONITOR_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_MONITOR_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail

   shopt -s extglob || internal_fail "Cant extglob"

   MULLE_ARGUMENTS="$*"
}
###
### INIT
###
########


_init "$@" # needs params
main "$@"
