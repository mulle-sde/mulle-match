#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_MATCH_TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION=0.5.2
MULLE_EXECUTABLE_BASHFUNCTIONS="1"


#
# This is the main user interface to mulle-match
#

trap_fail()
{
   exit 1
}


print_commands()
{
   local show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   init        : setup some initial patternfiles
   clean       : remove cached patternfiles
   list        : list files that match patternfiles
   match       : match filenames against patternfiles
   patternfile : manage patternfiles"

   HIDDEN_COMMANDS="\
   libexec-dir : print path to mulle-match libexec
   uname       : mulle-match's simplified uname(1)"


   printf "%s\n" "${SHOWN_COMMANDS}"

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}"
   fi
}


print_flags()
{
   local show_all="${1:-NO}"

   local delimiter

   delimiter="       : "

   echo "   -e   ${delimiter}bypass mulle-env check"
   echo "   -f   ${delimiter}force operation"
   echo "   -P   ${delimiter}specify search start points (separator :)"
   echo "   -I   ${delimiter}specify files and folders to ignore (separator :)"
   echo "   -F   ${delimiter}specify file pattern to match (separator :)"

   options_technical_flags_usage "${delimiter}"
}


_usage()
{
   local verbose="${1:-NO}"
   local error="${2}"

   if [ ! -z "${error}" ]
   then
      log_error "${error}"
   fi

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command]

   Match filenames to a user-definable set of patternfiles.
   Also: lists all files matching those patternfiles.

Flags:
EOF
   print_flags "${verbose}" | LC_ALL=C sort


   cat <<EOF

Commands:
EOF

   print_commands "${verbose}" | LC_ALL=C sort

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use mulle-match -v help to show more commands)
EOF
   fi

   cat <<EOF

   Use ${MULLE_USAGE_NAME} <command> -h for topical help.
EOF
}


usage()
{
   _usage "$@" >&2
   exit 1
}


main()
{
   local MULLE_FLAG_MAGNUM_FORCE='NO'

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         -f)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -F|--filename-patterns)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            MULLE_MATCH_FILENAMES="$1"
         ;;

         -I|--ignore-path)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            MULLE_MATCH_IGNORE_PATH="$1"
         ;;

         -P|--path)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            MULLE_MATCH_PATH="$1"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -*)
            log_error "Unknown option \"$1\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="$1"
   [ $# -ne 0 ] && shift

   if [ -z "${MULLE_VIRTUAL_ROOT}" ]
   then
      MULLE_VIRTUAL_ROOT="`pwd -P`"
      [ "${MULLE_VIRTUAL_ROOT}" = "/" ] && fail "Can't run with root folder as starting place"
   else
      rexekutor cd "${MULLE_VIRTUAL_ROOT}" || fail "Could not cd to \"${MULLE_VIRTUAL_ROOT}\""
   fi

   . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-environment.sh" || exit 1

   match_environment "" "${cmd}"

   case "${cmd}" in
      help)
         usage "${MULLE_TRACE}"
      ;;

      clean)
         # shellcheck source=src/mulle-match-clean.sh
         . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-clean.sh"

         match_clean_main "$@"
      ;;

      init)
         # shellcheck source=src/mulle-match-list.sh
         . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-init.sh"

         match_init_main "$@"
      ;;

      libexec-dir|library-path)
         printf "%s\n" "${MULLE_MATCH_LIBEXEC_DIR}"
      ;;

      list|find)
         # shellcheck source=src/mulle-match-list.sh
         . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-list.sh"

         match_list_main "$@"
      ;;

      match)
         # shellcheck source=src/mulle-match-match.sh
         . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-match.sh"

         match_match_main "$@"
      ;;

      patternfile)
         # shellcheck source=src/mulle-match-patternfile.sh
         . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-patternfile.sh"

         match_patternfile_main "$@"
      ;;

      uname)
         printf "%s\n" "${MULLE_UNAME}"
      ;;

      version)
         printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      "")
         usage "${MULLE_TRACE}"
      ;;

      *)
         log_error "Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}


########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "${executablepath}"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || \
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   r_get_libexec_dir "$0" "mulle-match" "mulle-match-match.sh"
   MULLE_MATCH_LIBEXEC_DIR="${RVAL}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         printf "%s\n" "${MULLE_MATCH_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   trap trap_fail INT
   set -o pipefail
}
###
### INIT
###
########


_init "$@" # needs params


quote="'"
args=""
for arg in "$@"
do
   arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
   args="${args} '${arg}'"
done

unset quote
unset arg

eval main "${MULLE_MATCH_FLAGS}" "${args}"

