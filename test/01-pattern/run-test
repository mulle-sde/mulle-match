#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


expect_pattern_matches_text()
{
   log_entry "expect_pattern_matches_text" "$@"

   local pattern="$1"
   local text="$2"

   if ! match::filename::pattern_matches_relative_filename "${pattern}" "${text}"
   then
      fail "Pattern \"${pattern}\" did not match text \"${text}\""
   fi
}


expect_pattern_not_matches_text()
{
   log_entry "expect_pattern_not_matches_text" "$@"

   local pattern="$1"
   local text="$2"

   if match::filename::pattern_matches_relative_filename "${pattern}" "${text}"
   then
      fail "Pattern \"${pattern}\" unexpectedly did match text \"${text}\""
   fi
}


main()
{
   MULLE_MATCH_FLAGS="$@"

   _options_mini_main "$@" && set -x

   #
   # memo: remember we only deal with relative paths w/o leading /!
   # for simplicity it's also assumed that no relative path contain a
   # trailing '/'
   #
   expect_pattern_matches_text "a" "a"
   expect_pattern_matches_text "?" "a"
   expect_pattern_matches_text "*" "a"
   expect_pattern_matches_text "*a" "a"
   expect_pattern_matches_text "a*" "a"
   expect_pattern_matches_text "*a*" "a"
   expect_pattern_matches_text "[a]" "a"
   expect_pattern_matches_text "[a-z]" "a"
   log_verbose "----- #1 PASSED -----"

   expect_pattern_not_matches_text "b" "a"
   expect_pattern_not_matches_text "[b]" "a"
   log_verbose "----- #2 PASSED -----"

   expect_pattern_not_matches_text "!?" "a"
   expect_pattern_not_matches_text "!*" "a"
   expect_pattern_not_matches_text "!*a" "a"
   expect_pattern_not_matches_text "!a*" "a"
   expect_pattern_not_matches_text "!*a*" "a"
   expect_pattern_not_matches_text "![a]" "a"
   log_verbose "----- #3 PASSED -----"

   expect_pattern_matches_text "*.c" "a.c"
   expect_pattern_matches_text "*.c" "a.b.c"
   expect_pattern_matches_text "*.c" "a/b.c"

   log_verbose "----- #4 PASSED -----"

   expect_pattern_matches_text     "/foo" "foo"
   expect_pattern_not_matches_text "/foo" "foo/a.c"
   expect_pattern_not_matches_text "/foo" "bar/foo"
   expect_pattern_not_matches_text "/foo" "bar/foo/a.c"
   log_verbose "----- #5 PASSED -----"

   expect_pattern_matches_text     "foo/" "foo"
   expect_pattern_matches_text     "foo/" "foo/a.c"
   expect_pattern_not_matches_text "foo/" "bar/foo"
   expect_pattern_matches_text     "foo/" "bar/foo/a.c"
   log_verbose "----- #6 PASSED -----"

   expect_pattern_matches_text     "/foo/" "foo"
   expect_pattern_matches_text     "/foo/" "foo/a.c"
   expect_pattern_not_matches_text "/foo/" "bar/foo"
   expect_pattern_not_matches_text "/foo/" "bar/foo/a.c"
   log_verbose "----- #7 PASSED -----"

   # in the wild problem
   expect_pattern_matches_text 'src/' 'src'
   expect_pattern_matches_text '*'    'src/foo.sh'
   expect_pattern_matches_text '*'    'foo/bar/whatever.sh'

   # new stuff with **
   expect_pattern_matches_text '**/*.c' 'a.c'
   expect_pattern_matches_text '**/*.c' 'b/a.c'
   expect_pattern_matches_text '**/*.c' 'c/b/a.c'

   expect_pattern_matches_text 'a/**/*.c' 'a/a.c'
   expect_pattern_matches_text 'a/**/*.c' 'a/b/a.c'
   expect_pattern_matches_text 'a/**/*.c' 'a/b/c/a.c'
   expect_pattern_not_matches_text 'a/**/*.c' 'b/a.c'
   expect_pattern_not_matches_text 'a/**/*.c' 'a.c'

   # but not as much with *

   expect_pattern_not_matches_text '*/*.c' 'a.c'
   expect_pattern_matches_text '*/*.c' 'b/a.c'
   expect_pattern_not_matches_text '*/*.c' 'c/b/a.c'


   log_verbose "----- #8 PASSED -----"

   log_info "----- ALL PASSED -----"
}



init()
{
   MULLE_MATCH="${MULLE_MATCH:-${PWD}/../../mulle-match}"

   MULLE_MATCH_LIBEXEC_DIR="`"${MULLE_MATCH}" "libexec-dir"`" || exit 1

   . "${MULLE_MATCH_LIBEXEC_DIR}/mulle-match-filename.sh" || exit 1
}


init "$@"
main "$@"

